[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;


uniform vec4 original_0: hint_color;
uniform vec4 original_1: hint_color;
uniform vec4 original_2: hint_color;
uniform vec4 original_3: hint_color;
uniform vec4 original_4: hint_color;
uniform vec4 replace_0: hint_color;
uniform vec4 replace_1: hint_color;
uniform vec4 replace_2: hint_color;
uniform vec4 replace_3: hint_color;
uniform vec4 replace_4: hint_color;

const float precision = 0.1;


vec4 swap_color(vec4 color){
	vec4 original_colors[5] = vec4[5] (original_0, original_1, original_2, original_3, original_4);
	vec4 replace_colors[5] = vec4[5] (replace_0, replace_1, replace_2, replace_3, replace_4);
	for (int i = 0; i < 5; i ++) {
		if (distance(color, original_colors[i]) <= precision){
			return replace_colors[i];
		}
	}
	return color;
}


void fragment() {
	COLOR = swap_color(texture(TEXTURE, UV));
}"

[resource]
shader = SubResource( 1 )
shader_param/original_0 = Color( 1, 0, 0, 1 )
shader_param/original_1 = Color( 0.721569, 0, 0, 1 )
shader_param/original_2 = Color( 0.898039, 0, 0, 1 )
shader_param/original_3 = Color( 0.588235, 0, 0, 1 )
shader_param/original_4 = Color( 0.419608, 0, 0, 1 )
shader_param/replace_0 = Color( 0.00784314, 0, 1, 1 )
shader_param/replace_1 = Color( 0, 0.0352941, 0.592157, 1 )
shader_param/replace_2 = Color( 0, 0.0156863, 1, 1 )
shader_param/replace_3 = Color( 0.0431373, 0, 0.768627, 1 )
shader_param/replace_4 = Color( 0.0588235, 0, 0.741176, 1 )
