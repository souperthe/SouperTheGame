[gd_scene load_steps=8 format=2]

[ext_resource path="res://assets/scripts/camerascript.gd" type="Script" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float wave_speed = 3.0; //wave loop speed
uniform float wave_freq = 10.0; //wave vertical freq
uniform float wave_width = 1; //wave width 
void fragment(){
	vec2 scale_UV = SCREEN_UV;
	vec2 wave_uv_offset;
	wave_uv_offset.x = cos((TIME*wave_speed)+UV.x+UV.y*wave_freq*2.0)*wave_width*0.01;
	//COLOR = vec4(wave_uv_offset,0.0,1.0);
	COLOR = texture(SCREEN_TEXTURE,scale_UV+wave_uv_offset);
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/wave_speed = 1.0
shader_param/wave_freq = 10.0
shader_param/wave_width = 2.0

[sub_resource type="Shader" id=5]
code = "//SHADER ORIGINALY CREADED BY \"jcant0n\" FROM SHADERTOY
//MODIFIED AND PORTED TO GODOT BY AHOPNESS (@ahopness)
//LICENSE : CC0
//COMATIBLE WITH : GLES2, GLES3, WEBGL
//SHADERTOY LINK : https://www.shadertoy.com/view/XssSDs#

shader_type canvas_item;

uniform float amount :hint_range(0.0, 1.5) = 1.0;

vec2 Circle(float Start, float Points, float Point) {
	float Rad = (3.141592 * 3.0 * (1.0 / Points)) * (Point + Start);
	return vec2(sin(Rad), cos(Rad));
}

void fragment(){
	vec2 uv = FRAGCOORD.xy / (1.0 / SCREEN_PIXEL_SIZE).xy;
	vec2 PixelOffset = amount / (1.0 / SCREEN_PIXEL_SIZE).xy;
	
	float Start = 2.0 / 14.0;
	vec2 Scale = 0.66 * 4.0 * 2.0 * PixelOffset.xy;
	
	vec3 N0 = texture(SCREEN_TEXTURE, uv + Circle(Start, 14.0, 0.0) * Scale).rgb;
	vec3 N1 = texture(SCREEN_TEXTURE, uv + Circle(Start, 14.0, 1.0) * Scale).rgb;
	vec3 N2 = texture(SCREEN_TEXTURE, uv + Circle(Start, 14.0, 2.0) * Scale).rgb;
	vec3 N3 = texture(SCREEN_TEXTURE, uv + Circle(Start, 14.0, 3.0) * Scale).rgb;
	vec3 N4 = texture(SCREEN_TEXTURE, uv + Circle(Start, 14.0, 4.0) * Scale).rgb;
	vec3 N5 = texture(SCREEN_TEXTURE, uv + Circle(Start, 14.0, 5.0) * Scale).rgb;
	vec3 N6 = texture(SCREEN_TEXTURE, uv + Circle(Start, 14.0, 6.0) * Scale).rgb;
	vec3 N7 = texture(SCREEN_TEXTURE, uv + Circle(Start, 14.0, 7.0) * Scale).rgb;
	vec3 N8 = texture(SCREEN_TEXTURE, uv + Circle(Start, 14.0, 8.0) * Scale).rgb;
	vec3 N9 = texture(SCREEN_TEXTURE, uv + Circle(Start, 14.0, 9.0) * Scale).rgb;
	vec3 N10 = texture(SCREEN_TEXTURE, uv + Circle(Start, 14.0, 10.0) * Scale).rgb;
	vec3 N11 = texture(SCREEN_TEXTURE, uv + Circle(Start, 14.0, 11.0) * Scale).rgb;
	vec3 N12 = texture(SCREEN_TEXTURE, uv + Circle(Start, 14.0, 12.0) * Scale).rgb;
	vec3 N13 = texture(SCREEN_TEXTURE, uv + Circle(Start, 14.0, 13.0) * Scale).rgb;
	vec3 N14 = texture(SCREEN_TEXTURE, uv).rgb;
	
	float W = 1.0 / 15.0;
	
	vec3 color = vec3(0,0,0);
	
	color.rgb = 
		(N0 * W) +
		(N1 * W) +
		(N2 * W) +
		(N3 * W) +
		(N4 * W) +
		(N5 * W) +
		(N6 * W) +
		(N7 * W) +
		(N8 * W) +
		(N9 * W) +
		(N10 * W) +
		(N11 * W) +
		(N12 * W) +
		(N13 * W) +
		(N14 * W);
	
	COLOR = vec4(color.rgb,1.0);
}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/amount = 0.1

[sub_resource type="Animation" id=3]
resource_name = "panic"
length = 6.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray(  ),
"transitions": PoolRealArray(  ),
"update": 0,
"values": [  ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("CanvasLayer/red:color")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 3.1, 6 ),
"transitions": PoolRealArray( -2, -2, 1 ),
"update": 0,
"values": [ Color( 1, 0, 0, 0 ), Color( 1, 0, 0, 0.301961 ), Color( 1, 0, 0, 0 ) ]
}

[sub_resource type="Animation" id=4]
resource_name = "reset"
tracks/0/type = "value"
tracks/0/path = NodePath(".:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("CanvasLayer/red:color")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 1, 0, 0, 0 ) ]
}

[node name="camera" type="Camera2D"]
visible = false
rotating = true
current = true
limit_smoothed = true
smoothing_speed = 0.0
offset_v = -1.0
editor_draw_limits = true
script = ExtResource( 1 )

[node name="VisibilityEnabler2D" type="VisibilityEnabler2D" parent="."]
position = Vector2( -480, -269 )
rect = Rect2( 0, 0, 960, 540 )

[node name="VisibilityNotifier2D" type="VisibilityNotifier2D" parent="."]
position = Vector2( -481, -270 )
rect = Rect2( 0, 0, 960, 540 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]
layer = -2

[node name="wavy" type="ColorRect" parent="CanvasLayer"]
material = SubResource( 2 )
use_parent_material = true
anchor_right = 1.0
anchor_bottom = 1.0

[node name="red" type="ColorRect" parent="CanvasLayer"]
use_parent_material = true
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 1, 0, 0, 0 )

[node name="ColorRect3" type="ColorRect" parent="CanvasLayer"]
visible = false
material = SubResource( 6 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
anims/panic = SubResource( 3 )
anims/reset = SubResource( 4 )

[node name="shake" type="Timer" parent="."]
one_shot = true
